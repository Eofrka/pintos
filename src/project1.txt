			+--------------------+
			|       CS 330       |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Team Name: OSOS
Team Number: 18
Yuhwan Chung yuhwan96@kaist.ac.kr

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, usage of tokens, or extra credit, please give them here.

사용할 토큰 수: 0개
기여도: Yuhwan Chung 100%

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

[interrupt handling]: https://notes.shichao.io/lkd/ch7/
[interrupt handling]: http://rusy.tistory.com/entry/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt
[deadlock]: http://includestdio.tistory.com/12


			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

threads/thread.c
    static struct list sleep_list: timer_sleep()시 current thread가 blocked되어 이 리스트에서 waiting하고 있다.

threads/thread.h
    Added to struct thread:
        int wakeup: timer_sleep()시 깨어날 ticks를 기억하고있다.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep():    
    1. interrupt를 disable시킨다.
    2. 깨어날 ticks를 구한다.
    3. 깨어날 ticks를 current thread의 wakeup에 저장한다.
    4. sleep_list에 current thread를 wakeup ticks값에 대해서 오름차순으로 insert해준다.
    5. current thread를 block시킨다.
    6. interrupt level을 복구해준다.

timer_interrupt():
    1. thread_ticks()를 통해 경우에 따른ticks값과 thread_ticks를 증가시켜 timer expired가 됬는지 check한다.
    2. 추가적으로 sleep_list에서 unblock할 thread가 있는지 linear search를 통해 check한다. 이 때 깨워줄 기준은
       현재 ticks값보다 sleep_list에 들어있는 쓰레드의 wakeup값이 작거나 같으면 깨워줘야된다.
    3. 그리고 priority scheduling정책에 따르면 쓰레드는 unblock시에 ready_list에 들어가는데, 만약 ready_list에서 max priority 값이
       현재 running중인 thread의 priority보다 크다면, 즉시 thread_yield()가 일어나야한다. 그런데 external interrupt context이므로
       ready_list에서 max priority값과 현재 running중인 thread값보다 크다면 intr_yield_on_return()을 통해 interrupt_handler()
       마지막에 thread_yield()를 호출하도록 해줘야된다.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

timer_interrupt()에서는 thread_awake()함수가 호출되는데, 이 thread_awake()함수에서 sleep_list를 linear하게 순회하면서 쓰레드의 wakeup ticks값이
current_ticks이하이면(이미 깨어날 시간이 지났거나, 깨어날 시간에 도달)thread를 sleep_list에서 제거하고 thread_unblock()을 통해 깨워준다. 그런데 sleep_list에 thread를 insert해줄때, 깨어날 ticks인 wakeup에 대해서 오름차순으로 정렬하여 insert해줬기 때문에 current_ticks보다 큰 wakeup ticks를
가지고 있는 thread를 만날 경우 바로 break를 통해 추가적인 thread들을 sleep_list에서 check해줄 필요가 없게 하였다. 


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

external interrupt handler인 timer_interrupt()와 timer_sleep()시 공유하는 데이터인 sleep_list에 current thread를 insert해줄때,
intr_disable()을 통해 timer_interrupt를 무시함으로써 context switch또한 일어나지 않도록 하였다. 그리고 thread_block()후에 다시
interrupt level을 복구시켜줬다.

timer_sleep()구현에서 lock, semaphore같은 synchronization이 아니라 intr_disable()을 통해서 synchronization을 해준 이유는
external interrupt handler에서는 thread가 sleep해서는 안되기 때문이다. external interrupt handler는 커널모드에서 interrupt
context라는 특별한 context에서 실행되는데, 이 때 interrupt가 발생하기전의 process(task)의 커널 스택을 빌려쓴다.
만약 interrupt context에서 sleep하게되면, 원래 process또한 sleep상태로가는데, 이 경우에 deadlock이 발생할 수 있다.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

일단 timer_sleep()에서 intr_disable()을통해 timer_interrupt()를 무시하여 sleep_list에 current thread를 insert해주는것과,
interrupt가 disabled된 상태로 호출되는 timer_interrupt()에서 깨어날 쓰레드를 sleep_list로부터 제거해주는것이 atomic함을 보장하였다.

timer_sleep()을 구현할때 사실 thread_sleep()이라는 함수를 짜서 handling했는데, thread_sleep()의 시작과 끝을 intr_disable()과
intr_set_level(old_level)을 사용했는데,그 이유는 깨어날 ticks인 wakeup ticks를 구하고 이 값을 current thread의 wakeup에 저장할때
또한 intr_disable()을 미리 해주지 않았다면 preemptive하므로 운이 안좋으면 sleep_list에 들어가긴했지만 timer interrupt시 곧바로
unblock되어 원하는 ticks만큼 sleep되지 않기 때문이다.


---- RATIONALE ----

>> A6: Why did you choose this design? In what ways is it superior to
>> another design you considered?

timer_sleep()에서 sleep_list에 thread를 push해줄 때 wakeup tick에 대해서 오름차순으로 정렬하여 insert해주었다. 시간복잡도는 O(n).
그리고 timer_interrupt()에서 thread를 깨워줄때, linear search를 하기는 하지만, A3에 언급한것처럼 wakeup ticks가 current ticks보다 클 경우,
break를 통해 searching time을 최소화 시켰다. 하지만 평균 시간복잡도는 O(n)이다. sleep list를 list보다 좀 더 효율적인 자료구조로 짜면 시간복잡도에서는
이득을 볼 수 있으나, list로 구현을 하는것이 간단하기도 하고 핀토스 manual에서도 다른 효율적인 자료구조로 짜지 않아도 된다고 했다.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

threads/thread.h
    Added to struct thread:
	int old_priority: priority_donation이 발생한 경우 최초 create될 당시의 priority를 저장한다. 초깃값은 -1이다.
	struct lock* lock: lock_acquire()에서 만약 target lock의 holder가 NULL이 아닐경우, 그 lock을 point한다.
	struct list lock_list: lock_acquire()에서 만약 target lock이 NULL일경우, 그 lock을 이 lock_list에 insert한다.
	struct semaphore* sema: 이 thread가 waiting하고있는 semaphore를 point한다.
	int donation_level: Priority donation구현시 thread들의 트리구조의 높이(donation여부를 나타내지는 않음).
	struct condition* cond: cond_wait()에서 이 thread가 semaphore_elem에 캡슐화되어 기다리고 있는 cond variable을 point한다.

threads/synch.h
    Added to struct lock:
	struct list_elem elem: lock_list에 insert되기 위한 list_elem.


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

src/project1_B2.png 파일 첨부하였습니다.
사진상에서 몇몇 생략된 member변수도 있지만, priority donation을 구현하기위한 thread와 lock의핵심 tree 구조를 표현하였습니다.
정확히 어떤순서로 priority donation이 일어나는지는 동적인거라서 설명하기 어려워서, donation이 일어난 후 최종 결과를 사진에 나타냈습니다.
구체적인 동적인 흐름은 ALGORITHMS부분에서 설명하겠습니다.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

thread_donate_priority()함수에서 실제로 priority donation이 recursive하게 이루어지도록 구현하였다.
먼저 priority donation을 고려하지 않는다면 design을 할 때 ready_list, lock의 semaphore의 waiters, semaphore의 waiters, 
condition variable의 waiters에 어떤 thread나 semaphore_elem로 캡슐화된 thread(condition variable의 경우)가 insert되는 경우
priority에 대해서 내림차순으로 정렬하여 insert시켜주고 pop할때는 list의 front entry를 pop해주면 충분하다.

하지만 priority donation을 고려한다면, donation이 일어날때마다 각 list에서 priority에 대해서 내림차순으로 잘 정렬되어있던게
흐트러질 수 있다. 따라서 donation이 발생 한 뒤에 기부를 받은thread의 상태를 check하여 각 경우마다(ready_list에 있는지, condition variable의 waiters에서
대기중인지, seamphore의 waiters에서 대기중인지) donation이 발생한 entry를 먼저 pop했다가 다시 순서를 보장하여 insert해주었다.
그러면 donation이 발생하였어도 priority에 대해 각 entry가 내림차순으로 정렬되어 priority queue의 성질을 만족하게 된다.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

lock_acquire()를 call했을때 priority donation이 일어나려면, 우선 lock_acquire()의 parameter에 해당하는 lock의 holder가 NULL이 아니어야 된다.
즉, 이미 그 lock은 최초에 어떤 쓰레드로 부터 lock_acuqire()가 이미 한번 호출 된 상황이다. 또한 그 holder thread의 (effective) priority가
현재 lock_acquire()를 call한 상태의 쓰레드의 priority보다 작아야 한다.

이러한 작업을 하기 위해서 lock_acquire()에서 일어나는 작업을 크게 3단계로 나눠보았다.
1. sema_down()을 호출하기 전에먼저 lock의 holder가 NULL이 아니라면 lock_acquire()를 호출한 current thread의 lock이
그 lock을 point하도록하고, tree구조의 유지를 위해 donation_level을 holder쓰레드의 donation_level보다 1큰 값으로 setting하였다.
나의 design에서는 donation_level이라는 변수명이 애매할 수 있는데, 사실 donation의 유무와는 관계없이
이는 단순히 nested donation을 위한 thread와 lock의 tree구조의 hight(depth)으로 사실상 사용되었다.
그리고 굳이 donation level에 limit을 두지는 않았다.

2. sema_down()시에 실제 priority donation이 일어나도록 design하였다. donation이 일어나는 상황이라는 것은
lock의 semaphore의 value값이 0이므로 sema_down()의 while문 내부로 들어가서 semaphore의 waiters에 priority에 대해 내림차순으로
정렬을 보장하도록 block이 될 예정인 thread(current thread)를 insert 해줬다. 그리고 insert가 일어난 다음, 이 때 실제 priority donation이
일어나도록 하였다. 그런데 thread_donate_priority 코드는 sema_down()에서 호출되므로 recursive의 초기 조건을 src thread의 donation_level이
0보다 클 경우에만 실제 donation 루틴으로 넘어가도록 하였다. 이는 lock_acquire()에서 sema_down()이 불린 경우를 구별하기 위해서 이런식으로 코드를
작성하였다. 굳이 donation_level값이 아니라 src thread의 lock이 NULL인지 아닌지 check하는것으로도 가능할 것 같다. 하지만 donation_level을
tree의 hight으로 취급하였기 때문에 코드를 짤 때 donation_level로 check하는게 좀 더 직관적이어서 이 방식으로 구현하였다.
그리고 제일 중요한 donation은 src의 priority가 dst의 priority보다 클 경우에만 일어나도록 구현하였다.
thread_donate_priority()의 코드를 보면 알겠지만 balancing처리를 하여 각각의 list가 priority queue의 기능을 하도록 보장하였고
nested donation같은 경우 donation_level을 이용하여 recursive하게 구현하였다.(만약에 (src) - (dst) - (dst의 dst) 이 구조에서 중간의 dst의 donation
level은 0보다 클 것이기 때문) 실제로 donation이 다 일어나면 thread_block()을 호출하여 이전에 lock_acquire()를 호출한 thread가 block되도록 하였다.


3. 만약에 block에서 깨어나면, semaphore의 value값을 1로 올린다음 다시 lock_acquire()의 frame으로 돌아와서
current thread의 lock_list에 lock을 넣어주고 lock의 holder가 current thread를 point하도록 하였다. lock_list에 insert해줄때에는 priority order에
크게 신경을 안써줬는데 예를들어 lock의 value가 1로 초기화된 thread가 최초로 그 lock을 acquire()하면 sema_down()에서 while loop를 거치지 않고 바로 이 부분으로
오는데, 이 때 lock의 semaphore의 waiters에는 아무 쓰레드도 없고, 이 lock_list에 대해서 각 lock마다 waiting하는 thread들의 우선순위 중 max값으로 sorting하는
것을 신경 쓰면 priority donation시 고려해야할 사항이 복잡해져서 lock_list는 그냥 list로 남겨두었다.
 

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

current thread의 lock_list에 있는 어떤 lock에서 current thread보다 priority가 높은 thread(H)가 block되어있는 상황이면, current thread의 priority또한
donation을 받아서 H의 priority이상의 값을 가지고 있을 것이다.(lock_list의 lock들 중에 H보다 priority가 더 높은 thread가 waiting중이면 current thread는
H보다 높은 priority를 가질 수 있음). 그러나 설명의 편의를 위해 H가 lock_list의 lock들에서 waiting중인 thread들중 max priority라고 가정하겠다.

이 경우 lock_release()가 호출되면 먼저 lock_release()의 parameter인 lock을 lock_list로부터 remove해야할 것이다. 그러면 현재 lock_list에는
그 lock을 제외하고 다른 lock들이 있을수도 있고 없을수도 있는데, 만약 있다면 그 lock들에서 waiting하고 있는 thread들의 priority중에
max값(waiting_max_priority)을 생각하자. 이제 current thread의 old_priority와 waiting_max_priority를 비교하여 waiting_max_priority가 더 크다면
current thread의 (effective) priority를 waiting_max_priority로 복구한다. 만약 작거나 같다면 old_priority로 복구를 시키고
old_priority값에는 -1을 setting 시켜준다. 만약 remove시켜준 lock을 제외하고 다른 lock들이 없다면 waiting_max_priority를 -1로 두고
위의 경우에 대입해주면 된다. 코드 구현은 thread_restore_priority()에 되어있다. restoration이 끝나면 lock_holder를 NULL로 setting 해주고
sema_up()을 call해준다.

sema_up()에서는 아까 제거해준 lock의 semaphore가 parameter로 들어가는데, 그 semaphore의 waiters에는 H가 있고, 그 H가 가장 max priority값을 가지고 있으므로
unblock시키기위해 waiters로 부터 pop을 할 때 waiters의 front를 pop해주면 된다. 그리고 이제 unblock될 thread가 waiting상태가 아니라는것을 나타내기 위해
lock, sema, cond 멤버변수들을 전부다 NULL로 setting한다. 그리고 이제 thread와 lock들의 tree구조가 바뀔텐데 이를 위해서 donation_level balancing을
실시해주는데 이때 root는 unblock될 쓰레드가 root가 된다.(어차피 lock자체는 다시 H의 lock_list로 들어갈 예정(unblock된다음 lock_acquire()에서 push해주는 코드가있음)이므로 그 lock의 semaphore의 waiters에서 대기중인 다른 쓰레드들의 donation_level은 동일할 것이기 때문) 그래서 unblock될 쓰레드(H)를 root로 하여
recursive하게 그 하위 thread들에 대해 각각 donation_level을 decrease 시켜주면 된다. 코드구현은 thread_dec_donation_level()에 되어있다.

마지막으로 thread_unblock()을 통해 H를 ready_list에 넣어주고, semaphore의 value를 1 증가시켜준다음 ready_list를 check하여 yield가 필요하다면 즉시
yield를 해준다. 지금은 H가 global하게 maximum이기 때문에 즉시 yield를 통해 H가 scheduling 될 것이다.(만약 H가 global하게 maximum이 아니라면 current thread의
priority가 thread_restore_priority()에 의해 더 높은 priority값으로 설정되어있다면 H는 ready_list에서 대기 할 것이다.) 


---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

일단 thread_set_priority()가 preemptive하다면 만약에 thread A(A의 현재 priority: 31)가 이미 어떤 lock을 최초로 획득한 상황을 가정해보자.
그리고 아직 어떠한 donation도 A에게 일어나지 않았을때 A가 thread_set_priority(41)을 call한 상황을 생각해보자. 이 때 만약
void thread_set_priority(int new_priority)
{
      (생략)
      /* case 1-2: Highering priority or setting equal value. */
      else
      {
        curr->priority = new_priority; <<여기서 register에 new_priority값이 있고 아직 curr->priority의 주소로 mov가 안 된 상황에서 timer interrupt 발생!
      }
      (생략)
}

위와 같은 상황일때 이미 ready_list에는 A와 priority값이 같은 B가 대기중이었다면, B가 running상태로 될 것이다.
그런데 B가 priority가 50인 새로운 thread C를 create()하면 즉시 C가 스케쥴링 될 것이다. 그런데 여기서 운이없게도
C가 A가 갖고있는 lock에 대하여 lock_acquire()하여 A의 priority를 50으로 바꿔버리고 C자신은 blocked상태로 되버렸다.
이 때 다시 A가 schedule되면, 50이 다시 이제 register에 있던 new_priority값인 40으로 setting 되어버린다.
이는 원하지 않은 결과이다. 이 밖에도 다른 race condition이 donation을 통해서 얼마든지 일어날 수 있으므로
아예 thread_set_priority()동안에는 timer interrupt를 무시하도록 하는 방법인 old_level = intr_disable()과 intr_set_priority(old_level)을 사용해 주었다.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

가장 간단하게 구현하는 방법은 list에 insert할때는 그냥 무조건 뒤에다 insert시켜주고, pop하기 전에 priority에 대해 내림차순으로 정렬해준 다음
pop하는 방법이 있겠다. 그러나 이 방법의 경우 만약 pintos에서 제공된 list_sort()로 할 경우 O(nlogn) 시간복잡도를 가진다. 하지만 내가 design한
방식은 대기하는 list들을 priority queue처럼 취급하도록 design 하였다. 따라서 pop할때에는 무조건 front를 pop해주므로, 평소에 list에다 insert를
할때에는 일단 priority에 대해 내림차순으로 정렬됨을 보장하여 insert해주고O(n), donation이 발생 할 때마다 remove(O(1))와 다시 순서를 보장하여
insert(O(n))만큼 걸리게 하여 평균적인 시간복잡도에서 이득을 볼 수 있다. 하지만 이는 어디까지나 평균적인 경우이고 좀 더 효율적인 insert와 remove를
구현하려면 red black tree같은 트리구조로 priority queue를 설계해야되는데 이는 너무 복잡하다.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

프로젝트가 시작하는 정규 lab session외에도 월요일마다 조교님들이 질문 받아주는 lab session이 있었으면 좋겠습니다.

>> Any other comments?

